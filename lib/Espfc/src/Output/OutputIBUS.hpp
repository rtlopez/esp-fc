#pragma once

#include "Device/SerialDevice.h"
#include "Utils/Timer.h"

namespace Espfc::Output {

class OutputIBUS
{
public:
  OutputIBUS() {}

  int begin(Device::SerialDevice* serial)
  {
    _serial = serial;
    _timer.setInterval(7000); // 7ms

    return 1;
  }

  int update()
  {
    if(!_timer.check()) return 0;

    // const uint8_t data[] = {
    //   0x20, 0x40,  // preambule (len, cmd)
    //   0xDC, 0x05,  0xDC, 0x05,  0xBE, 0x05,  0xDC, 0x05, // channel 1-4
    //   0xD0, 0x07,  0xD0, 0x07,  0xDC, 0x05,  0xDC, 0x05, // channel 5-8
    //   0xDC, 0x05,  0xDC, 0x05,  0xDC, 0x05,  0xDC, 0x05, // channel 9-12
    //   0xDC, 0x05,  0xDC, 0x05,  // channel 13-14
    //   0x83, 0xF3  // checksum
    // };

    const uint8_t data[] = {
      0x20, 0x40,
      0xDB, 0x05, 0xDC, 0x05,  0x54, 0x05, 0xDC, 0x05,  0xE8, 0x03, 0xD0, 0x07,  0xD2, 0x05, 0xE8, 0x03,
      0xDC, 0x05, 0xDC, 0x05,  0xDC, 0x05, 0xDC, 0x05,  0xDC, 0x05, 0xDC, 0x05,
      0xDA, 0xF3,
    };

    _serial->write(data, sizeof(data));

    return 1;
  }

private:
  Device::SerialDevice* _serial;
  Utils::Timer _timer;
};

}
